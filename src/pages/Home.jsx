import React from "react";
import qs from "qs";
import { useNavigate } from "react-router-dom";
import { SearchContext } from "../App";
import { useDispatch, useSelector } from "react-redux";
import { setCategoryId, setCurrentPage, setFilters, initialState } from "../redux/Slices/filterSlice";
import { getPizzas } from "../redux/Slices/pizzaSlice";

import Categories from "../components/Categories";
import Sort from "../components/Sort";
import PizzaBlock from "../components/PizzaBlock";
import Skeleton from "../components/PizzaBlock/Skeleton";
import Pagination from "../components/Pagination";
// import pizzas from "./assets/pizzas.json";

const Home = () => {
  const { categoryId, sort, currentPage } = useSelector((state) => state.filter);
  const {items: pizzas, status } = useSelector((state) => state.pizza);
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const isSearch = React.useRef(false);
  const isMounted = React.useRef(false);
  const { searchValue } = React.useContext(SearchContext);

  const onClickCategory = (id) => {
    dispatch(setCategoryId(id));
  };
  const onChangePage = (num) => {
    dispatch(setCurrentPage(num));
  }
  const fetchPizzas = async () => {
    const sortParams = [
      { name: "–ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏", sort: "rating", order: "desc" },
      { name: "—Ü–µ–Ω–µ ‚Üë", sort: "price", order: "desc" },
      { name: "—Ü–µ–Ω–µ ‚Üì", sort: "price", order: "asc" },
      { name: "–∞–ª—Ñ–∞–≤–∏—Ç—É", sort: "title", order: "asc" },
    ];
    const category = categoryId ? "&category=" + categoryId : "",
      sortBy = sortParams[sort].sort,
      order = sortParams[sort].order,
      search = searchValue ? searchValue.trim() : "";
    
    dispatch(getPizzas({category, sortBy, order, search, currentPage}));
  }

  React.useEffect(() => {
    window.scrollTo(0, 0);
    // –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å—Å—ã–ª–∫–µ, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º redux –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ.
    if (window.location.search) {
      const params = qs.parse(window.location.search.substring(1));
      if(Object.values(params).join() === Object.values(initialState).join()){
        fetchPizzas(); // –¥–µ–ª–∞–µ–º fetch –≤—Ä—É—á–Ω—É—é –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Å—ã–ª–∫–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –Ω–∞—á–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ redux
      }
      dispatch(setFilters(params));
      isSearch.current = true; // –¥–∞, –ø—Ä–∏—à–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL 
    }
  }, []);

  // –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ redux state, –¥–µ–ª–∞–µ—Ç—Å—è axios –∑–∞–ø—Ä–æ—Å.
  React.useEffect(() => {
    if (!isSearch.current) { 
      fetchPizzas() // –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Å—Å—ã–ª–∫–µ
    }
    isSearch.current = false; // –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—ã–∑–æ–≤–µ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
  }, [categoryId, sort, searchValue, currentPage, isSearch]);

  // –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ redux state, —É –Ω–∞—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
  React.useEffect(() => {
    if (isMounted.current) {
      const queryString = qs.stringify(
        {
          sortProperty: sort.sortProperty,
          categoryId,
          sort,
          currentPage,
        },
        { addQueryPrefix: true }
      );
      navigate(queryString);
    }
    isMounted.current = true; // –¥–∞–Ω–Ω—ã–π –±–ª–æ–∫ –∫–æ–¥–∞ –æ—Ç—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ –≤—Ç–æ—Ä–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
  }, [categoryId, sort, currentPage, navigate]);

  const items = pizzas.map((obj, i) => (
    <PizzaBlock key={obj.title + obj.id} {...obj} />
  ));
  const skeletons = [...new Array(8)].map((_, idx) => <Skeleton key={idx} />);

  return (
    <div className="container">
      <div className="content__top">
        <Categories
          activeCategoryId={categoryId}
          setCategoryId={(i) => onClickCategory(i)}
        />
        <Sort />
      </div>
      <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
      {status === "error" ? (
        <div className="content__error-info">
          <h2>
            –ù–µ –≥—Ä—É–∑–∏—Ç—Å—è <span>üòï</span>
          </h2>
          <p>
            –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Ç—Å—ã.
            <br />
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.
          </p>
        </div>
      ) : (
        <div className="content__items">
          {status === "loading" ? skeletons : items}
        </div>
      )}

      <Pagination page={currentPage} setCurrentPage={onChangePage} />
    </div>
  );
};

export default Home;
